Python Code:
Method 1 (Sort in ascending order):-->without using sort function
l=list(map(int,input().split()))
for i in range(0,len(l)):
    for j in range(i+1,len(l)):
        if(l[i]>=l[j]):
            l[i],l[j]=l[j],l[i]
print(l)
Output:
76 23 45 12 54 9
[9, 12, 23, 45, 54, 76]

Method 2 (Sort in descending order):-->without using sort function
l=list(map(int,input().split()))
for i in range(0,len(l)):
    for j in range(i+1,len(l)):
        if(l[i]<=l[j]):
            l[i],l[j]=l[j],l[i]
print(l)
Output:
76 23 45 12 54 9
[76, 54, 45, 23, 12, 9]

Method 3:Ascending order using sort function
l=list(map(int,input().split()))
l.sort()
print(l)
Output:
76 23 45 12 54 9
[9, 12, 23, 45, 54, 76]

Method 4:Descending order using sort function
l=list(map(int,input().split()))
l.sort(reverse=True)
print(l)
Output:
76 23 45 12 54 9
[76, 54, 45, 23, 12, 9]

CPP Code:
Method 1:Naive approach-->ascending order
#include<bits/stdc++.h>
using namespace std;
int getOrder(int arr[], int n)
{
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]>arr[j])
            {
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}
int main()
{
    int n1;
    cin>>n1;
    int arr[n1];
    for(int i=0;i<n1;i++)
    {
        cin>>arr[i];
    }
  getOrder(arr,n1);
}
Output:
7
10 89 67 45 83 9 12
9 10 12 45 67 83 89 

Method 2:--->ascending order
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[]={10, 89, 67, 45, 83, 9, 12};
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]>arr[j])
            {
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}
Output:
7
9 10 12 45 67 83 89 

Method 3:Descending order
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[]={10, 89, 67, 45, 83, 9, 12};
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]<arr[j])
            {
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}
Output:
7
89 83 67 45 12 10 9 

Method 4:Descending order
#include<bits/stdc++.h>
using namespace std;
int getOrder(int arr[],int n)
{
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]<arr[j])
            {
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}
int main()
{
    int n1;
    cin>>n1;
    int arr[n1];
    for(int i=0;i<n1;i++)
    {
        cin>>arr[i];
    }
    getOrder(arr,n1);
}
Output:
7
10 89 67 45 83 9 12
89 83 67 45 12 10 9 

Method 5:Ascending order by using sort function
#include<bits/stdc++.h>
using namespace std;
int getOrder(int arr[],int n)
{
    sort(arr,arr+n);
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}
int main()
{
    int n1;
    cin>>n1;
    int arr[n1];
    for(int i=0;i<n1;i++)
    {
        cin>>arr[i];
    }
    getOrder(arr,n1);
}
Output:
7
10 89 67 45 83 9 12
9 10 12 45 67 83 89 

Method 6: Descending order using sort function
#include<bits/stdc++.h>
using namespace std;
int getOrder(int arr[],int n)
{
    sort(arr,arr+n,greater<int>());
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}
int main()
{
    int n1;
    cin>>n1;
    int arr[n1];
    for(int i=0;i<n1;i++)
    {
        cin>>arr[i];
    }
    getOrder(arr,n1);
}
Output:
7
10 89 67 45 83 9 12
89 83 67 45 12 10 9 










