Binary Search Algorithm:
Step 1: Divide the search space into 2 halves:
In order to divide the search space, we need to find the middle point of it. So, we will take a ‘mid’ pointer and do the following:
mid = (low+high) // 2 ( ‘//’ refers to integer division)

Step 2: Compare the middle element with the target:

In this step, we can observe 3 different cases:
If arr[mid] == target: We have found the target. From this step, we can return the index of the target possibly.
If target > arr[mid]: This case signifies our target is located on the right half of the array. So, the next search space will be the right half.
If target < arr[mid]: This case signifies our target is located on the left half of the array. So, the next search space will be the left half.

Step 3: Trim down the search space:
Based on the probable location of the target we will trim down the search space.

If the target occurs on the left, we should set the high pointer to mid-1. Thus the left half will be the next search space.
Similarly, if the target occurs on the right, we should set the low pointer to mid+1. Thus the right half will be the next search space.

The above steps will continue until either we found the target or the search space becomes invalid i.e. high < low. By definition of search space, it will lose its existence if the high pointer is appearing before the low pointer.
Dry-run:

Note: If the target is not present in the array, low and high will cross each other.

CPP Code:
#include<iostream>
using namespace std;
int main()
{
    int n,target;
    cin>>n>>target;
    int arr[n];
    int low=0,high=n-1;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    bool found=false;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(arr[mid]==target)
        {
            cout<<mid;
            found=true;
            break;
        }
        else if(target>arr[mid])
        low=mid+1;
        else
        high=mid-1;
    }
    if(!found)
    {
        cout<<"Element is not present"<<"\n";
    }
    return 0;
}
Input:
5 4
2 3 4 10 40 

Output:
2

