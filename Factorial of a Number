Python Code:
Method 1:
def factorial(n):
    if(n==0 or n==1):
        return 1
    else:
        return n*factorial(n-1)
n=int(input())
print(factorial(n))
Output:
5
120

Method 2:
def factorial(n):
    if n<0:
        return 0
    elif n==0 or n==1:
        return 1
    else:
        fact=1
        while(n>0):
            fact=n*fact
            n=n-1
        return fact
n=int(input())
print(factorial(n))
Output:
5
120

Method 3:
def factorial(n):
    res=1
    for i in range(2,n+1):
        res*=n
        n=n-1
    return res
n=int(input())
print(factorial(n))
Output:
5
120

Method 4:
def factorial(n):
    res=1
    for i in range(2,n+1):
        res*=i
    return res
n=int(input())
print(factorial(n))
Output:
5
120

Method 5:Factorial of a Number Using using In-built function 
import math
def factorial(n):
    return math.factorial(n)
n=int(input())
print(factorial(n))
Output:
5
120

CPP Code:
Method 1:(Iterative)
#include<iostream>
using namespace std;
int main()
{
    int n,fact=1;
    cin>>n;
    if(n<0)
    {
        cout<<"Not Possible";
    }
    else if(n==0)
    {
        return 1;
    }
    else
    for(int i=1;i<=n;i++)
    {
        fact=fact*i;
    }
    cout<<fact;
}
Output:
5
120

Method 2:
#include<iostream>
using namespace std;
unsigned int factorial(unsigned int n)
{
    if(n==0 or n==1)
    {
        return 1;
    }
    return n*factorial(n-1);
}
int main()
{
    int n;
    cin>>n;
    cout<<factorial(n);
}
Output:
5
120

Method 3:
#include<iostream>
using namespace std;
unsigned int factorial(unsigned int n)
{
    int res=1;
    for(int i=2;i<=n;i++)
    {
        res=res*i;
    }
    return res;
}
int main()
{
    int n;
    cin>>n;
    cout<<factorial(n);
}
Output:
5
120










