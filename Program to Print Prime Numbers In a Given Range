Python Code:
Method 1: Using inner loop Range as [2, number-1]
a,b=map(int,input().split())
primes=[]
for i in range(a,b+1):
    flag=0
    if(i<2):
        continue
    if(i==2):
        primes.append(i)
        continue
    for j in range(2,i):
        if(i%j==0):
            flag=1
            break
    if(flag==0):
        primes.append(i)
print(primes)
Output:
2 10
[2, 3, 5, 7]

Method 2: Using inner loop Range as [2, number/2]
Working
For two integer inputs as limits, we perform the following main operations,

Run a for loop to iterate through the numbers in a given interval.
Run a nested while to check for prime by checking if the number has any other factors in the range [2, number/2].
a,b=map(int,input().split())
primes=[2]
for i in range(a,b+1):
    flag=0
    if(i<2):
        continue
    if(i%2==0):
        continue
    iter=2
    while iter<int(i/2):
        if i%iter==0:
            flag=1
            break
        iter+=1
    if(flag==0):
        primes.append(i)
print(primes)
Output:
2 10
[2, 3, 5, 7]

Method 3: Using inner loop Range as [2, sqrt(number)]
low, high = 2, 10
primes = [2, 3]

for num in range(low, high + 1):
    flag = 0
    
    if num < 2:
        flag = 1
        
    if num % 2 == 0:
        continue
        
    if num % 3 == 0:
        continue
        
    iter = 2
    while iter < int(pow(num, 0.5)):
        if num % iter == 0:
            flag = 1
            break
        iter += 1
        
    if flag == 0:
        primes.append(num)

print(primes)
Output:
2 10
[2, 3, 5, 7]

CPP Code:
Method 1:
#include<iostream>
using namespace std;
int main()
{
    int a,b;
    cin>>a>>b;
    for(int i=a;i<=b;i++)
    {
        if(i==2)
        {
            cout<<i<<" ";
            continue;
        }
        for(int j=2;j<i;j++)
        {
            if(i%j==0)
            {
                break;
            }
            else if(i==j+1)
            {
                cout<<i<<" ";
            }
        }
    }
    return 0;
}
Output:
2 10
[2, 3, 5, 7]

Method 2:Check divisors between [2, n-1]
#include<iostream>
using namespace std;
bool isPrime(int n)
{
    int count=0;
    if(n<2)
    return false;
    for(int i=2;i<n;i++)
    {
        if(n%i==0)
        return false;
    }
    return true;
}
int main()
{
    int a,b;
    cin>>a>>b;
    for(int i=a;i<b;i++)
    {
        if(isPrime(i))
        {
            cout<<i<<" ";
        }
    }
}
Output:
2 10
[2, 3, 5, 7]

Method 3: Check divisors between [2, n/2]
#include<iostream>
using namespace std;
bool isPrime(int n)
{
    int count=0; 
    if(n<2)
    return false;
    for(int i=2;i<n/2;i++)
    {
        if(n%i==0)
        return false;
    }
    return true;
}
int main()
{
    int a,b;
    cin>>a>>b;
    for(int i=a;i<b;i++)
    {
        if(isPrime(i))
        cout<<i<<" ";
    }
}
Output:
2 100
2 3 4 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 

Method 4: Check divisors between [2, âˆšn],but skipping even iterations
#include<iostream>
#include<math.h>
using namespace std;
bool isPrime(int n)
{
    int count=0;
    if(n<=1)
    return false;
    else if(n==2)
    return true;
    else if(n%2==0)
    return false;
    for(int i=3;i<=sqrt(n);i++)
    {
        if(n%i==0)
        {
            return false;
        }
    }
    return true;
}
int main()
{
    int a,b;
    cin>>a>>b;
    for(int i=a;i<=b;i++)
    {
        if(isPrime(i))
        cout<<i<<" ";
    }
    return 0;
}
Output:
2 100
2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 





